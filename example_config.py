"""Contains configs for telegram bot."""

from datetime import datetime
from collections import namedtuple
import fetch_schedule

# Your auth token for the bot
AUTH_TOKEN = "YOUR TOKEN"
# USER_ID of a person who control the bot
OVERLORD_USER_ID = "YOUR ID"
# Your schedule URL
URL = ""

# Bot in group settings
MAX_REQUEST = 3 # Max repeated requests for one user in REQUEST_TIME
REQUEST_TIME = 1  # in minutes

# Schedule settings
Text = namedtuple("Text", ['weekdays','timestamps','week','teacher',
                           'link','email','phone', 'no_lesson','no_day',
                           'scheduled_lesson', 'next_lesson','current_lesson','err',
                           'unknown_command','no_auth','verbose_mode','deaf_mode',
                           'request_limit'])

INTERVAL = 115 * 60 # In minutes
START = "8:25"
END = "18:25"
LESSON_LENGTH = 95 * 60 # In minutes
AUTODELETE = 3 * 60 # In minutes
WEEKDAYS = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', "–ü'—è—Ç–Ω–∏—Ü—è"]
TIMESTAMPS = ["08:30", "10:25", "12:20", "14:15", "16:10", "18:05"]
TEXT = Text(weekdays = WEEKDAYS,
            timestamps = TIMESTAMPS,
            week = "–¢–∏–∂–¥–µ–Ω—å",
            teacher = "–í–∏–∫–ª–∞–¥–∞—á",
            link = "–ü–æ—Å–∏–ª–∞–Ω–Ω—è",
            email = "–ï–ª. –ü–æ—à—Ç–∞",
            phone = "–¢–µ–ª–µ—Ñ–æ–Ω",
            no_lesson = "–ó–∞—Ä–∞–∑ –ø–∞—Ä–∏ –Ω–µ–º–∞—î",
            no_day = "C—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä –Ω–µ –±—É–¥–µ",
            scheduled_lesson = "*–£–≤–∞–≥–∞, –∑–∞ 5 —Ö–≤ —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è:*\n",
            current_lesson = "*–ó–∞—Ä–∞–∑ –π–¥–µ/–±—É–¥–µ –ø–∞—Ä–∞:*\n",
            next_lesson = "\n*–ù–∞—Å—Ç—É–ø–Ω–æ—é –ø–∞—Ä–æ—é –±—É–¥–µ:*\n",
            err = "–ü–æ–º–∏–ª–∫–∞ —É —Ä–æ–∑–∫–ª–∞–¥—ñ, –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ!",
            unknown_command = "–í–∏–±–∞—á, —Ü—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–Ω–∞—é(",
            no_auth = "You're not authorized to use this bot!",
            request_limit = "–õ—ñ–º—ñ—Ç –∑–∞–ø—Ä–æ—Å—ñ–≤ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ–± –±—É–¥—å –ª–∞—Å–∫–∞ –ø–æ—á–µ–∫–∞–π—Ç–µ!",
            verbose_mode = ["–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–∞ –¥–æ —Ä–æ–∑–ª–∞–¥—É:",'–í–∏–∫–ª.','–í–∫–ª.'],
            deaf_mode = ["–ß–∏ —Ä–µ–∞–≥—É—é –Ω–∞ –∫–æ–º–∞–Ω–¥–∏?",'–¢–∞–∫!','–ù—ñ!'],
)
TABLE_IDS = ["ctl00_MainContent_SecondScheduleTable", "ctl00_MainContent_FirstScheduleTable"]
LESSON_TYPES = ["–õ–µ–∫","–õ–∞–±","–ü—Ä–∞–∫"]

# Helper functions (changing this functions is not recommended)

fetch_schedule.extract_and_save_schedule(URL, TABLE_IDS, LESSON_TYPES)

def get_current_time_details(start, end, interval, lesson_length):
    """
    Get details about the current time, day, and week.

    Parameters:
        start (str): The start time in HH:MM format.
        end (str): The end time in HH:MM format.
        interval (int): The interval between lessons in seconds.
        lesson_length (int): The interval between lessons end and next lesson start in seconds.

    Returns:
        tuple: The current lesson index, day of the week, and week number (odd/even).
    """
    current_time = datetime.now().time()
    current_day = datetime.now().weekday()
    current_date = datetime.now().date()
    current_week = 2 if current_date.isocalendar()[1] % 2 == 1 else 1

    start_time = datetime.strptime(start, '%H:%M').time()
    end_time = datetime.strptime(end, '%H:%M').time()

    if start_time <= current_time <= end_time:
        elapsed_time = datetime.combine(datetime.today(), current_time) - datetime.combine(datetime.today(), start_time)
        total_seconds = elapsed_time.total_seconds()
        lesson_index = int(total_seconds // (interval))

    # Check if we are exactly at the end of a lesson
        if total_seconds % (interval) == 0:
            lesson_index += 1  # Move to the next lesson index

    # Check if we are between lessons
        elif total_seconds % (interval) <= (lesson_length):
            lesson_index += 1  # Move to the next lesson index
    else:
        lesson_index = 100 # To make sure the lesson_index is out of range

    return lesson_index, current_day, current_week

def form_message(msg_type, text=TEXT, link=True, info=False, return_false=False, callback_message=False):
    """
    Generate a message based on the type specified.

    Parameters:
        msg_type (str): Type of message to generate.
        text (object): Text object containing various text templates.
        link (bool): Whether to include links in the message.
        info (bool): Whether to include additional information.
        return_false (bool): Whether to return False if date out of schedule range.
        callback_message (bool): Changes the text of the message for MESSAGE_NOW

    Returns:
        str: The generated message.
    """
    MESSAGE_NOW = 0
    MESSAGE_TODAY = 1
    MESSAGE_WEEK = 2
    MESSAGE_ALL = 3

    form_sch = fetch_schedule.form_schedule
    reply_text = ""
    l, d, w = get_current_time_details(START, END, INTERVAL,LESSON_LENGTH)

    if msg_type == MESSAGE_NOW:
        lesson = form_sch(text, lesson_index=l, day_index=d, week=w, include_teacher_info=info, include_links=link)
        next_lesson = form_sch(text, lesson_index=(l+1), day_index=d, week=w, include_teacher_info=info, include_links=link)
        current_lesson_text = text.scheduled_lesson if callback_message else text.current_lesson
        reply_text += current_lesson_text if lesson else text.no_lesson
        reply_text += lesson
        reply_text += text.next_scheduled_lesson + next_lesson if next_lesson else ""
        if return_false and reply_text == text.no_lesson:
            return False
    elif msg_type == MESSAGE_TODAY:
        day = form_sch(text, day_index=d, week=w, include_teacher_info=info, include_links=link)
        reply_text += day if day else text.no_day
    elif msg_type == MESSAGE_WEEK:
        week = form_sch(text, week=w, include_teacher_info=info, include_links=link)
        reply_text += week if week else text.err
    elif msg_type == MESSAGE_ALL:
        week_1 = form_sch(text, week=1, include_teacher_info=info, include_links=link)
        week_2 = form_sch(text, week=2, include_teacher_info=info, include_links=link)
        all = week_1 + "%%" + week_2
        reply_text += all if all else text.err

    return reply_text

def fill_none_values():
    fetch_schedule.check_none_values('teachers')
    fetch_schedule.check_none_values('lessons')


def get_welcome_message():

    # Fill in the placeholders with actual information
    bot_name='CalenBOT'
    description='~–ø–æ—Ä–∞–±–æ—Ç–∏—Ç–∏ –ª—é–¥—Å—Ç–≤–æ~ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º —Ä–æ–∑–∫–ª–∞–¥ —à–≤–∏–¥–∫–æ —Ç–∞ —É –∑—Ä—É—á–Ω—ñ–π —Ñ–æ—Ä–º—ñ üòâ'
    pros='\- *–ë–∞–≥–∞—Ç–æ–≥—Ä–∞–Ω–Ω–∏–π:* –ú–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –±—É–¥—å\-—è–∫–æ—ó –≥—Ä—É–ø–∏\n\- *–î–±–∞–π–ª–∏–≤–∏–π:* –ü–æ–ø–µ—Ä–µ–¥–∂–∞—é –∑–∞ 5—Ö–≤ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—Ä–∏ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\n\- *–¢—Ä–µ–Ω–æ–≤–∞–Ω–∏–π:* –ú–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞—Ä–∞–∑, –Ω–∞ –¥–µ–Ω—å, —Ç–∏–∂–¥–µ–Ω—å —Ç–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —è–∫—â–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ, —Ç–∞ –º–∞—é –ª—ñ–º—ñ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å–∏, —â–æ–± –Ω–µ –±—É–ª–æ —Å–ø–∞–º—É\n\- *–í—ñ–¥–∫—Ä–∏—Ç–∏–π:* –ú—ñ–π –∫–æ–¥ —É –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É –¥–æ—Å—Ç—É–ø—ñ üòâ\n\- *–°–ª—É—Ö–Ω—è–Ω–∏–π:* –ê–¥–º—ñ–Ω–∏ –≥—Ä—É–ø–∏ –º–æ–∂—É—Ç—å –º–µ–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏\n\- *–û–±–µ—Ä–µ–∂–Ω–∏–π:* —ñ–Ω—à—ñ –≥—Ä—É–ø–∏ –Ω–µ –º–æ–∂—É—Ç—å –º–µ–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É\n\- *–ß–∏—Å—Ç–æ–ø–ª–æ—Ç–Ω–∏–π:* –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—é –∫–æ–∂–Ω—ñ 3—Ö–≤ —Å—Ç–∞—Ä—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± —Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Ç —É —á–∏—Å—Ç–æ—Ç—ñ'
    cons='\- –ù–µ –º–æ–∂—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —á–∞—Ç–∞—Ö\n\- –ù–µ –∑–º–æ–∂—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π —Å–µ–∞–Ω—Å –ø—ñ—Å–ª—è –ø–∞—Ä–∏ –∑ –±—ñ–æ—Ö—ñ–º—ñ—ó\n\- –ù–∞—Ä–∞–∑—ñ –º–æ–∂—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ, –∞–¥–∂–µ –∑–∞–ª–µ–∂—É –≤—ñ–¥ —Ç–æ–≥–æ, —Ö—Ç–æ –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞\n\- –ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –∑–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ –ø—Ä–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –ø–∞—Ä\n\- –ü–æ–∫–∏ —â–æ –ø—Ä–∞—Ü—é—é –ª–∏—à–µ –∑ –ø–æ—Å—Ç—ñ–π–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ —Ç–∞ –∑ –æ–¥–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É'
    how_to_use = "1\. –Ø –º–æ–∂—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—Ä–∏ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\. –¶—é –æ–ø—Ü—ñ—é –∑–∞–ø—É—Å–∫–∞—é—Ç—å –ª–∏—à–µ –∞–¥–º—ñ–Ω–∏ –≥—Ä—É–ø–∏, —Ç–∞ _–≤–æ–ª–æ–¥–∞—Ä –±–æ—Ç–∞_\n2\. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ –≤ —ñ–Ω—à–∏–π —á–∞—Å —Ç–æ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è `/` –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ 4 –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ —è –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏\. –ê–¥–º—ñ–Ω–∏ –º–∞—é—Ç—å –±—ñ–ª—å—à–µ –∫–æ–º–∞–Ω–¥\.\n3\. *That's all, let's go\!*\n\n"
    author_name='Oleksii Stroganov'
    github_repo='https://github\.com/merv1n34k/CalenBOT'

    # Template for the welcome message
    welcome_message = (
        f"*–í—ñ—Ç–∞—é\!*\n\n–Ø _{bot_name}_\. –ú–æ—è –º–µ—Ç–∞ —Ü–µ {description}\.\n\n"

        "*–ù–µ –∑–Ω–∞—î—à —á–∏ —è —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω?\n–¢–æ–¥—ñ —Ç—Ä–æ—Ö–∏ —ñ–Ω—Ñ–∏ –ø—Ä–æ –º–µ–Ω–µ:\n\n*"
        "ü¶æ*–ú–æ—ó –ø–µ—Ä–µ–≤–∞–≥–∏:*\n"
        f"{pros}\n\n"
        "ü§ï*–ú–æ—ó –Ω–µ–¥–æ–ª—ñ–∫–∏:*\n"
        f"{cons}\n\n"

        "‚ùì*–Ø–∫ –∑—ñ –º–Ω–æ—é –ø—Ä–∞—Ü—é–≤–∞—Ç–∏:*\n"
        f"{how_to_use}"

        "*–¢—Ä–æ—Ö–∏ –ø—Ä–æ –±–∞—Ü—å–∫–∞:*\n"
        f"_–ê–≤—Ç–æ—Ä:_ {author_name}\n"
        f"_–î–µ —è –∂–∏–≤—É:_ {github_repo}\n"
    )

    return welcome_message

# Example usage
if __name__ == "__main__":
    print(get_welcome_message())

